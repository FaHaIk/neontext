{"version":3,"file":"neontext.umd.js","sources":["../src/neontext.ts"],"sourcesContent":["/**\n * The interface for the options object\n * @interface options\n */\ninterface options {\n    /** The HTMLElement's id, that contains the text. */\n    elem: string,\n    /** An array of color strings to be used as textshadow color. */\n    colors?: Array<string>,\n    /** The blur radius in pixel. */\n    shadowBlurRadius?: number,\n    /** Do the characters randomly get a color assigned. */\n    random?: boolean,\n    /** Apply color to the text. */\n    colorizeText?: boolean,\n    /** The shadow x offset. */\n    shadowOffsetX?: number,\n    /** The shadow y offset. */\n    shadowOffsetY?: number,\n}\n\n/** \n* Splits the innerText of the HTMLElement into spans and applies a different textshadow to each of them, based on the colors provided.\n* @function neonify\n* @param {options} options - The options object with {elem: string, colors?: string[], blur?: number, random?: boolean}.\n*/\nfunction neonify({ ...options }: options) {\n\n    /** If no element was passed via options, or it does not exist log an error and return. */\n    if (!options.elem) {\n        console.error(\"No 'elem' property set in options.\")\n        return\n    } else if (!document.getElementById(options.elem)) {\n        console.error(`No element with the id \"${options.elem}\" found.`)\n        return\n    }\n\n    /** Set defaults. */\n    options.colors = options.colors || [\"#ff00ff\", \"#00ffff\", \"#ffff00\"]\n    options.shadowBlurRadius = options.shadowBlurRadius || 5\n    options.random = options.random || false\n    options.colorizeText = options.colorizeText || false\n    options.shadowOffsetX = options.shadowOffsetX || 0\n    options.shadowOffsetY = options.shadowOffsetY || 0\n\n    /** @constant {Array<string>} */\n    const charArr = _splitElementString(options.elem)\n\n    _removeChildNodes(options.elem);\n    _createSpanElements(charArr, options);\n}\n\n/** \n* Wraps every character in a span element and applies a textshadow effect to each one of them.\n* @function createSpanElements\n* @param {Array<string>} charArr - An array containing the split characters.\n*/\nfunction _createSpanElements(charArr: Array<string>, options: options) {\n    const elem = document.getElementById(options.elem)\n    for (let i = 0; i < charArr.length; i++) {\n        if (charArr[i] == \"\\n\") {\n            elem.appendChild(document.createElement(\"br\"));\n        } else {\n            let span = document.createElement(\"span\");\n            span.setAttribute('class', 'data');\n            span.innerText = charArr[i];\n\n            /** randomly apply a color for the textshadow */\n            if (options.random) {\n                const randomNumber = _getRandomIntInclusive(0, options.colors.length - 1)\n                span.style.textShadow = options.shadowOffsetX + \"px \" + options.shadowOffsetY + \"px \" + options.shadowBlurRadius + \"px \" + options.colors[randomNumber];\n                if(options.colorizeText) {\n                    span.style.color = options.colors[randomNumber]\n                }\n            }\n            elem.appendChild(span);\n        }\n    }\n    /** repeat the colors if !options.random */\n    if (!options.random) {\n        for (let y = 0; y < options.colors.length; y++) {\n            for (let i = 0; i < elem.querySelectorAll(\"span:nth-of-type(\" + options.colors.length + \"n + \" + (y + 1) + \")\").length; i++) {\n                let spanElement = elem.querySelectorAll(\"span:nth-of-type(\" + options.colors.length + \"n + \" + (y + 1) + \")\")[i] as HTMLElement\n                spanElement.style.textShadow = options.shadowOffsetX + \"px \" + options.shadowOffsetY + \"px \" + options.shadowBlurRadius + \"px \" + options.colors[y]\n                if(options.colorizeText) {\n                    spanElement.style.color = options.colors[y]\n                }\n            }\n        }\n    }\n}\n\n/** \n* Takes in a min and max number and randmonly returns a number(including min and max).\n* @function getRandomIntInclusive\n* @param {number} min - Is always 0.\n* @param {number} max - Equates to array.length -1.\n* @returns {number}\n*/\nfunction _getRandomIntInclusive(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** \n* Takes in the id of an element and splits it's innerText into characters.\n* @function splitElementString\n* @param {string} elem - The id of the text container.\n* @returns {Array<string>}\n*/\nfunction _splitElementString(elem: string): Array<string> {\n    const _elem = document.getElementById(elem)\n    return Array.from(_elem.innerText);\n}\n\n/** \n* Removes all children from a node..\n* @function removeChildNodes\n* @param {string} parent - The id of the text container.\n*/\nfunction _removeChildNodes(parent: string) {\n    const _parent = document.getElementById(parent)\n    while (_parent.firstChild) {\n        _parent.removeChild(_parent.firstChild);\n    }\n}\n\n\nexport { neonify, _getRandomIntInclusive, _splitElementString, _removeChildNodes, _createSpanElements }\n"],"names":["_createSpanElements","charArr","options","elem","document","getElementById","i","length","appendChild","createElement","span","setAttribute","innerText","random","randomNumber","_getRandomIntInclusive","colors","style","textShadow","shadowOffsetX","shadowOffsetY","shadowBlurRadius","colorizeText","color","y","querySelectorAll","spanElement","min","max","Math","ceil","floor","_splitElementString","_elem","Array","from","_removeChildNodes","parent","_parent","firstChild","removeChild","console","error"],"mappings":"4OAyDA,SAASA,EAAoBC,EAAwBC,WAC3CC,EAAOC,SAASC,eAAeH,EAAQC,MACpCG,EAAI,EAAGA,EAAIL,EAAQM,OAAQD,OACd,MAAdL,EAAQK,GACRH,EAAKK,YAAYJ,SAASK,cAAc,WACrC,KACCC,EAAON,SAASK,cAAc,WAClCC,EAAKC,aAAa,QAAS,QAC3BD,EAAKE,UAAYX,EAAQK,GAGrBJ,EAAQW,OAAQ,KACVC,EAAeC,EAAuB,EAAGb,EAAQc,OAAOT,OAAS,GACvEG,EAAKO,MAAMC,WAAahB,EAAQiB,cAAgB,MAAQjB,EAAQkB,cAAgB,MAAQlB,EAAQmB,iBAAmB,MAAQnB,EAAQc,OAAOF,GACvIZ,EAAQoB,eACPZ,EAAKO,MAAMM,MAAQrB,EAAQc,OAAOF,IAG1CX,EAAKK,YAAYE,OAIpBR,EAAQW,WACJ,IAAIW,EAAI,EAAGA,EAAItB,EAAQc,OAAOT,OAAQiB,QAClC,IAAIlB,EAAI,EAAGA,EAAIH,EAAKsB,iBAAiB,oBAAsBvB,EAAQc,OAAOT,OAAS,QAAUiB,EAAI,GAAK,KAAKjB,OAAQD,IAAK,KACrHoB,EAAcvB,EAAKsB,iBAAiB,oBAAsBvB,EAAQc,OAAOT,OAAS,QAAUiB,EAAI,GAAK,KAAKlB,GAC9GoB,EAAYT,MAAMC,WAAahB,EAAQiB,cAAgB,MAAQjB,EAAQkB,cAAgB,MAAQlB,EAAQmB,iBAAmB,MAAQnB,EAAQc,OAAOQ,GAC9ItB,EAAQoB,eACPI,EAAYT,MAAMM,MAAQrB,EAAQc,OAAOQ,KAc7D,SAAST,EAAuBY,EAAaC,UACzCD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKhB,UAAYe,EAAMD,EAAM,IAAMA,EASzD,SAASK,EAAoB7B,OACnB8B,EAAQ7B,SAASC,eAAeF,UAC/B+B,MAAMC,KAAKF,EAAMrB,WAQ5B,SAASwB,EAAkBC,WACjBC,EAAUlC,SAASC,eAAegC,GACjCC,EAAQC,YACXD,EAAQE,YAAYF,EAAQC,8CAlGpC,gBAAsBrC,aAGbA,EAAQC,KAGN,GAAKC,SAASC,eAAeH,EAAQC,MAArC,CAMPD,EAAQc,OAASd,EAAQc,QAAU,CAAC,UAAW,UAAW,WAC1Dd,EAAQmB,iBAAmBnB,EAAQmB,kBAAoB,EACvDnB,EAAQW,OAASX,EAAQW,SAAU,EACnCX,EAAQoB,aAAepB,EAAQoB,eAAgB,EAC/CpB,EAAQiB,cAAgBjB,EAAQiB,eAAiB,EACjDjB,EAAQkB,cAAgBlB,EAAQkB,eAAiB,MAG3CnB,EAAU+B,EAAoB9B,EAAQC,MAE5CiC,EAAkBlC,EAAQC,MAC1BH,EAAoBC,EAASC,QAhBzBuC,QAAQC,iCAAiCxC,EAAQC,sBAHjDsC,QAAQC,MAAM"}