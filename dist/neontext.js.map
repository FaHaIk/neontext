{"version":3,"file":"neontext.js","sources":["../src/neontext.ts"],"sourcesContent":["/**\r\n * The interface for the options object\r\n * @interface options\r\n */\r\ninterface options {\r\n    /** The HTMLElement's id, that contains the text. */\r\n    elem: string,\r\n    /** An array of color strings to be used as textshadow color. */\r\n    colors?: Array<string>,\r\n    /** The blur radius in pixel. */\r\n    shadowBlurRadius?: number,\r\n    /** Do the characters randomly get a color assigned. */\r\n    random?: boolean,\r\n    /** Apply color to the text. */\r\n    colorizeText?: boolean,\r\n    /** The shadow x offset. */\r\n    shadowOffsetX?: number,\r\n    /** The shadow y offset. */\r\n    shadowOffsetY?: number,\r\n}\r\n\r\n/** \r\n* Splits the innerText of the HTMLElement into spans and applies a different textshadow to each of them, based on the colors provided.\r\n* @function neonify\r\n* @param {...options} options - The options object with {elem: string, colors?: string[], blur?: number, random?: boolean}.\r\n*/\r\nfunction neonify({ ...options }: options) {\r\n\r\n    /** If no element was passed via options, or it does not exist log an error and return. */\r\n    if (!options.elem) {\r\n        console.error(\"No 'elem' property set in options.\")\r\n        return\r\n    } else if (!document.getElementById(options.elem)) {\r\n        console.error(`No element with the id \"${options.elem}\" found.`)\r\n        return\r\n    }\r\n\r\n    /** Set defaults. */\r\n    options.colors = options.colors || [\"#ff00ff\",\"#00ffff\", \"#01FFC3\"]\r\n    options.shadowBlurRadius = options.shadowBlurRadius || 5\r\n    options.random = options.random || false\r\n    options.colorizeText = options.colorizeText || false\r\n    options.shadowOffsetX = options.shadowOffsetX || 0\r\n    options.shadowOffsetY = options.shadowOffsetY || 0\r\n\r\n    /** @constant {Array<string>} */\r\n    const charArr = _splitElementString(options.elem)\r\n\r\n    _removeChildNodes(options.elem);\r\n    _createSpanElements(charArr, options);\r\n}\r\n\r\n/** \r\n* Wraps every character in a span element and applies a textshadow effect to each one of them.\r\n* @function createSpanElements\r\n* @param {Array<string>} charArr - An array containing the split characters.\r\n*/\r\nfunction _createSpanElements(charArr: Array<string>, options: options) {\r\n    const elem = document.getElementById(options.elem)\r\n    for (let i = 0; i < charArr.length; i++) {\r\n        if (charArr[i] == \"\\n\") {\r\n            elem.appendChild(document.createElement(\"br\"));\r\n        } else {\r\n            let span = document.createElement(\"span\");\r\n            span.setAttribute('class', 'data');\r\n            span.innerText = charArr[i];\r\n\r\n            /** randomly apply a color for the textshadow */\r\n            if (options.random) {\r\n                const randomNumber = _getRandomIntInclusive(0, options.colors.length - 1)\r\n                span.style.textShadow = options.shadowOffsetX + \"px \" + options.shadowOffsetY + \"px \" + options.shadowBlurRadius + \"px \" + options.colors[randomNumber];\r\n                if(options.colorizeText) {\r\n                    span.style.color = options.colors[randomNumber]\r\n                }\r\n            }\r\n            elem.appendChild(span);\r\n        }\r\n    }\r\n    /** repeat the colors if !options.random */\r\n    if (!options.random) {\r\n        for (let y = 0; y < options.colors.length; y++) {\r\n            for (let i = 0; i < elem.querySelectorAll(\"span:nth-of-type(\" + options.colors.length + \"n + \" + (y + 1) + \")\").length; i++) {\r\n                let spanElement = elem.querySelectorAll(\"span:nth-of-type(\" + options.colors.length + \"n + \" + (y + 1) + \")\")[i] as HTMLElement\r\n                spanElement.style.textShadow = options.shadowOffsetX + \"px \" + options.shadowOffsetY + \"px \" + options.shadowBlurRadius + \"px \" + options.colors[y]\r\n                if(options.colorizeText) {\r\n                    spanElement.style.color = options.colors[y]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** \r\n* Takes in a min and max number and randmonly returns a number(including min and max).\r\n* @function getRandomIntInclusive\r\n* @param {number} min - Is always 0.\r\n* @param {number} max - Equates to array.length -1.\r\n* @returns {number}\r\n*/\r\nfunction _getRandomIntInclusive(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/** \r\n* Takes in the id of an element and splits it's innerText into characters.\r\n* @function splitElementString\r\n* @param {string} elem - The id of the text container.\r\n* @returns {Array<string>}\r\n*/\r\nfunction _splitElementString(elem: string): Array<string> {\r\n    const _elem = document.getElementById(elem)\r\n    return Array.from(_elem.innerText);\r\n}\r\n\r\n/** \r\n* Removes all children from a node..\r\n* @function removeChildNodes\r\n* @param {string} parent - The id of the text container.\r\n*/\r\nfunction _removeChildNodes(parent: string) {\r\n    const _parent = document.getElementById(parent)\r\n    while (_parent.firstChild) {\r\n        _parent.removeChild(_parent.firstChild);\r\n    }\r\n}\r\n\r\n\r\nexport { neonify, _getRandomIntInclusive, _splitElementString, _removeChildNodes, _createSpanElements }\r\n"],"names":["neonify","options","elem","document","getElementById","colors","shadowBlurRadius","random","colorizeText","shadowOffsetX","shadowOffsetY","charArr","_splitElementString","_removeChildNodes","_createSpanElements","console","error","i","length","appendChild","createElement","span","setAttribute","innerText","randomNumber","_getRandomIntInclusive","style","textShadow","color","y","querySelectorAll","spanElement","min","max","Math","ceil","floor","_elem","Array","from","parent","_parent","firstChild","removeChild"],"mappings":"AA0BA,SAASA,MAAaC,OAGbA,EAAQC,KAGN,GAAKC,SAASC,eAAeH,EAAQC,MAArC,CAMPD,EAAQI,OAASJ,EAAQI,QAAU,CAAC,UAAU,UAAW,WACzDJ,EAAQK,iBAAmBL,EAAQK,kBAAoB,EACvDL,EAAQM,OAASN,EAAQM,SAAU,EACnCN,EAAQO,aAAeP,EAAQO,eAAgB,EAC/CP,EAAQQ,cAAgBR,EAAQQ,eAAiB,EACjDR,EAAQS,cAAgBT,EAAQS,eAAiB,MAG3CC,EAAUC,EAAoBX,EAAQC,MAE5CW,EAAkBZ,EAAQC,MAC1BY,EAAoBH,EAASV,QAhBzBc,QAAQC,MAAO,2BAA0Bf,EAAQC,qBAHjDa,QAAQC,MAAM,sCA2BtB,SAASF,EAAoBH,EAAwBV,WAC3CC,EAAOC,SAASC,eAAeH,EAAQC,MACpCe,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,OACd,MAAdN,EAAQM,GACRf,EAAKiB,YAAYhB,SAASiB,cAAc,WACrC,KACCC,EAAOlB,SAASiB,cAAc,WAClCC,EAAKC,aAAa,QAAS,QAC3BD,EAAKE,UAAYZ,EAAQM,GAGrBhB,EAAQM,OAAQ,KACViB,EAAeC,EAAuB,EAAGxB,EAAQI,OAAOa,OAAS,GACvEG,EAAKK,MAAMC,WAAa1B,EAAQQ,cAAgB,MAAQR,EAAQS,cAAgB,MAAQT,EAAQK,iBAAmB,MAAQL,EAAQI,OAAOmB,GACvIvB,EAAQO,eACPa,EAAKK,MAAME,MAAQ3B,EAAQI,OAAOmB,IAG1CtB,EAAKiB,YAAYE,OAIpBpB,EAAQM,WACJ,IAAIsB,EAAI,EAAGA,EAAI5B,EAAQI,OAAOa,OAAQW,QAClC,IAAIZ,EAAI,EAAGA,EAAIf,EAAK4B,iBAAiB,oBAAsB7B,EAAQI,OAAOa,OAAS,QAAUW,EAAI,GAAK,KAAKX,OAAQD,IAAK,KACrHc,EAAc7B,EAAK4B,iBAAiB,oBAAsB7B,EAAQI,OAAOa,OAAS,QAAUW,EAAI,GAAK,KAAKZ,GAC9Gc,EAAYL,MAAMC,WAAa1B,EAAQQ,cAAgB,MAAQR,EAAQS,cAAgB,MAAQT,EAAQK,iBAAmB,MAAQL,EAAQI,OAAOwB,GAC9I5B,EAAQO,eACPuB,EAAYL,MAAME,MAAQ3B,EAAQI,OAAOwB,KAc7D,SAASJ,EAAuBO,EAAaC,UACzCD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAK3B,UAAY0B,EAAMD,EAAM,IAAMA,EASzD,SAASpB,EAAoBV,OACnBmC,EAAQlC,SAASC,eAAeF,UAC/BoC,MAAMC,KAAKF,EAAMd,WAQ5B,SAASV,EAAkB2B,WACjBC,EAAUtC,SAASC,eAAeoC,GACjCC,EAAQC,YACXD,EAAQE,YAAYF,EAAQC"}